@*支援多個路由*@
@page "/note"
@page "/MyNotes"
@using BlazorAppWasmLab.Client.Services
@using BlazorAppWasmLab.Shared
@using Microsoft.AspNetCore.Components
@inject IMyNoteService MyNoteService

<h3>我的記事</h3>

<table class="table">
    <thead>
    <tr>
        <th>事項</th>
        <th>修改</th>
        <th>刪除</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var noteItem in Notes)
    {
        <tr>
            <td>@noteItem.Title</td>
            <td>
                <button class="btn btn-primary" @onclick="() => Update(noteItem)">修改</button>
            </td>
            <td>
                <button class="btn btn-danger" @onclick="() => Delete(noteItem)">刪除</button>
            </td>
        </tr>
    }
    </tbody>
</table>
<div>
    <button class="btn btn-primary" @onclick="Add">新增</button>
</div>
@if (ShowPopup)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">記事項目</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="row p-2">
                            <EditForm Model="@CurrentMyNote" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <ValidationSummary></ValidationSummary>
                                <div class="form-group">
                                    <label for="taskName">事項名稱</label>
                                    <InputText id="taskName" class="form-control" @bind-Value="@CurrentMyNote.Title"></InputText>
                                </div>
                                <button type="submit" class="btn btn-primary">儲存</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    public List<MyNote>? Notes { get; set; } = new List<MyNote>();
    public MyNote CurrentMyNote { get; set; } = new MyNote();
    public MyNote OrigMyNote { get; set; } = new MyNote();
    public bool ShowPopup { get; set; } = false;
    public bool IsNewMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Notes = await MyNoteService.RetrieveAsync();
    }

    private async Task Delete(MyNote noteItem)
    {
        await MyNoteService.DeleteAsync(noteItem);
        Notes = await MyNoteService.RetrieveAsync();
        StateHasChanged();
    }

    private void Add()
    {
        IsNewMode = true;
        CurrentMyNote = new MyNote();
        ShowPopup = true;
    }

    private void Update(MyNote noteItem)
    {
        IsNewMode = false;
        CurrentMyNote = OrigMyNote = noteItem.Clone();
        CurrentMyNote = noteItem.Clone();
        OrigMyNote = noteItem;
        ShowPopup = true;
    }

    private async Task HandleValidSubmit()
    {
        ShowPopup = false;
        if (IsNewMode)
        {
            await MyNoteService.CreateAsync(CurrentMyNote);
        }
        else
        {
            await MyNoteService.UpdateAsync(OrigMyNote, CurrentMyNote);
        }

        Notes = await MyNoteService.RetrieveAsync();
        StateHasChanged();
    }

    private void CloseDialog()
    {
        ShowPopup = false;
    }

}