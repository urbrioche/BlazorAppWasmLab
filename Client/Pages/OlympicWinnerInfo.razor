@page "/olympicwinnerinfo"
@using Radzen
@implements IDisposable
@implements IRazorPage
@inject OlympicWinnerViewModel _viewModel

<RadzenDropDown
    TValue="IEnumerable<string>"
    @bind-Value="_viewModel.SelectedSports"
    Data="_viewModel.Sports"
    Multiple="true"
    AllowFiltering="true"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    AllowClear="true">
</RadzenDropDown>
@foreach (var sport in _viewModel.Sports)
{
    <div style="display: @(_viewModel.SelectedSports.Contains(sport) ? "block" : "none")">
        <div>
            @sport
        </div>
        <div>
            <OlympicWinnerChartComponent @ref="_viewModel.ChartComponent" SportName="@sport"></OlympicWinnerChartComponent>
        </div>
    </div>
}

<OlympicWinnerGridComponent ContainerId="olympicWinnerGrid" DataSource="Enumerable.Empty<OlympicWinner>()"></OlympicWinnerGridComponent>
@code {

    protected override void OnInitialized()
    {
        _viewModel.Setup(this);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _viewModel.RenderChartAsync();
        }
    }

    public void Dispose()
    {
        _viewModel.CancellationTokenSource.Cancel();
    }

    public async Task NeedRefreshAsync()
    {
        await InvokeAsync(async () =>
        {
            await Task.Delay(500);
            StateHasChanged();
        });
    }

    public async Task NeedInvokeAsync(Action action)
    {
        await InvokeAsync(action);
    }

}