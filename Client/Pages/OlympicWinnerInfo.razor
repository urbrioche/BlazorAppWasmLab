@page "/olympicwinnerinfo"
@implements IDisposable
@inject IOlympicWinnerService _olympicWinnerService

@foreach (var sport in Sports)
{
    <div>
        @sport
    </div>
    <div>
        <OlympicWinnerChartComponent @ref="ChartComponent" SportName="@sport"></OlympicWinnerChartComponent>
    </div>
}

@code {

    public IEnumerable<string> Sports { get; set; } = new List<string>();
    public IEnumerable<OlympicWinner>? DataSource { get; set; }
    public List<OlympicWinnerChartComponent> ChartComponents = new();
    private CancellationTokenSource _cancellationTokenSource = new();

    public OlympicWinnerChartComponent ChartComponent
    {
        set => ChartComponents.Add(value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Sports = await _olympicWinnerService.GetSportAsync();
            await InvokeAsync(async () =>
            {
                await Task.Delay(1);
                StateHasChanged();
            });
    // if (firstRender)
    // {
            foreach (var chart in ChartComponents)
            {
                var data = await _olympicWinnerService.GetWinnerAsync(chart.SportName ?? "");
                await Task.Delay(100);
    // chart.DataSource = data;
    // DataSource = data;
    // StateHasChanged();
                if (!_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    await chart.Render(data);
                }
            }
        }
    // }
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
    }

}