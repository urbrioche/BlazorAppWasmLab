@page "/employeeGrowthChart"
@using BlazorAppWasmLab.Client.Components
@using BlazorAppWasmLab.Client.Interfaces
@using BlazorAppWasmLab.Client.Services
@using System.Reflection
@inject IEmployeeSummaryService _employeeSummaryService
@implements IDisposable
@i
<PageTitle>Employee Growth Chart</PageTitle>
@for (int i = 0; i < _chartCount; i++)
{
    <div style="border: #0a53be 1px solid;">
        @i
        <EmployeeGrowthChartComponent @ref="C1" ContainerId="@("emp-growth-chart" + i)"/>
    </div>
}

@if (_done)
{
    <div>Done</div>
}

@code {

    private int _chartCount = 5;
    private bool running = true;

    public EmployeeGrowthChartComponent C1
    {
        set => Charts.Add(value);
    }

    public List<EmployeeGrowthChartComponent> Charts = new();
    public int i = 0;
    private CancellationTokenSource _cancellationTokenSource = new();
    private bool _done = false;

    protected override async Task OnInitializedAsync()
    {
    // 不會動
        foreach (var chart in Charts)
        {
            Console.WriteLine("in OnInitializedAsync");
            var data = await _employeeSummaryService.GetDataAsync();
            if (_cancellationTokenSource.Token.IsCancellationRequested)
            {
                break;
            }
            chart.DataSource = data;
            await chart.Render();
        }
    // for (int i = 0; i < _chartCount; i++)
    // {
    //     var data = await _employeeSummaryService.GetDataAsync();
    //     if (_cancellationTokenSource.Token.IsCancellationRequested)
    //     {
    //         break;
    //     }
    //     Charts[i].DataSource = data;
    //     await Charts[i].Render();
    // }
    // while (i < 100)
    // {
    //     await InvokeAsync(() => i++);
    // }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    // 會動
            foreach (var chart in Charts)
            {
                Console.WriteLine("in OnAfterRenderAsync");
                var data = await _employeeSummaryService.GetDataAsync();
                if (_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    break;
                }
                chart.DataSource = data;
                await chart.Render();
            }
            _done = true;
            StateHasChanged();
            // StateHasChanged();
        }
    // if (firstRender)
    // {j
    // Data = await _employeeSummaryService.GetDataAsync();
    // StateHasChanged();
    //C1.Data = Data;
    //await C1.Render();
    // }
    }

    public IEnumerable<EmployeeSummary>? Data { get; set; }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
    }

}