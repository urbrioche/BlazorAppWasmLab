@inject IJSRuntime _jsRuntime
@using BlazorAppWasmLab.Client.Interfaces
@using BlazorAppWasmLab.Client.Services
@implements IAsyncDisposable
@inject IEmployeeSummaryService _employeeSummaryService

<button class="btn btn-primary" disabled="@(DataSource == null)">Click</button>
<div @ref="Chart"></div>

@code {

    [Parameter]
    public string? ContainerId { get; set; }

    [Parameter]
    public IEnumerable<EmployeeSummary>? DataSource { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _employeeGrowthChart = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./js/src/employee-growth-chart-export.js?v={DateTime.Now}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    // _employeeGrowthChart = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./js/src/employee-growth-chart-export.js?v={DateTime.Now}");
    // await _employeeGrowthChart.InvokeVoidAsync("employeeGrowthChart.render", new {Data = DataSource, ContainerId});
    // var data = await _employeeSummaryService.GetDataAsync();
        }
    }

    public async Task Render()
    {
        if (_employeeGrowthChart != null)
        {
            await _employeeGrowthChart.InvokeVoidAsync("employeeGrowthChart.render", new {Data = DataSource, ContainerId = Chart});
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await (_employeeGrowthChart?.DisposeAsync() ?? ValueTask.CompletedTask);
    }

    private IJSObjectReference? _employeeGrowthChart;
    public ElementReference Chart { get; set; }

}